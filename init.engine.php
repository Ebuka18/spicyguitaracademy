<?php if (isset($_POST['action']) == true) { $action = $_POST['action']; switch ($action) { case 'create_model': $name = $_POST['name']; $table = $_POST['table']; echo createModel($name,$table); break; case 'create_view': $name = $_POST['name']; echo createView($name); break; case 'create_controller': $name = $_POST['name']; echo createController($name); break; case 'create_provider': $name = $_POST['name']; echo createProvider($name); break; case 'add_auth': echo addAuthentication(); break; default: echo false; break; } } else { include_once "config.php"; $domain = \Config["DOMAIN"]; ?> <!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> <meta http-equiv="X-UA-Compatible" content="ie=edge"> <title>INITFRAMEWORK | Init Engine</title> <script src="public/assets/js/jquery.min.js"></script> <script src="public/assets/js/popper.min.js"></script> <script src="public/assets/js/bootstrap.min.js"></script> <link rel="stylesheet" href="public/assets/css/bootstrap.css"> <script src="public/assets/js/main.js"></script> </head> <body> <div class="container mt-3 bg-dark"> <a href="<?=str_replace("localhost","",$domain)?>" class="float-right h5 mt-3 text-muted">Home</a> <div class="float-left text-muted h1">Init Engine</div> </div> <div class="clearfix"></div> <hr class="bg-success"> <main class="container bg-light border rounded shadow-sm mx-auto px-2 py-4 mt-5"> <section class="row no-gutters"> <div class="col-3 p-1"> <label for="modelName" class="h5 font-weight-normal">Create Model</label> <input type="text" id="modelName" class="input form-control" placeholder="E.g UserModel"> <br> <input type="text" id="tableName" class="input form-control" placeholder="E.g user_tbl"> <br> <button onclick="createModel();" class="btn btn-sm btn-dark">Create Model</button> </div> <div class="col-3 p-1"> <label for="viewName" class="h5 font-weight-normal">Create View</label> <input type="text" id="viewName" class="input form-control" placeholder="E.g dashboard"> <br> <button onclick="createView();" class="btn btn-sm btn-dark">Create View</button> </div> <div class="col-3 p-1"> <label for="controllerName" class="h5 font-weight-normal">Create Controller</label> <input type="text" id="controllerName" class="input form-control" placeholder="E.g UserController"> <br> <button onclick="createController();" class="btn btn-sm btn-dark">Create Controller</button> </div> <div class="col-3 p-1"> <label for="providerName" class="h5 font-weight-normal">Create Provider</label> <input type="text" id="providerName" class="input form-control" placeholder="E.g TransactionsProvider"> <br> <button onclick="createProvider();" class="btn btn-sm btn-dark">Create Provider</button> </div> </section> <hr> <div class="mt-3"> <button onclick="addAuth();" class="btn btn-sm btn-dark">Add Authentication</button> <br> <span class="text-info">Ensure your database is setup to match the database configurations in config.php before adding Authentication.</span> </div> </main> </body> <script> function createModel() { var _modelName = $("#modelName").val(); var _tableName = $("#tableName").val(); _modelName = _modelName.trim(); _tableName = _tableName.trim(); if (_modelName == "" || _tableName == "") { alert("Please fill all Model inputs."); } else { var url = "<?=str_replace("localhost","",$domain)?>/init.engine.php"; var data = { action: "create_model", name: _modelName, table: _tableName } 
$.post(url, data, function(data, status){ if (status == "success") { if (data == true) { alert(_modelName + " is created successfully."); $("#modelName").val(""); $("#tableName").val(""); } else { alert("Sorry, " + _modelName + " was not created."); } } else { alert("Sorry, " + _modelName + " was not created."); } }); } } function createView() { var _viewName = $("#viewName").val(); _viewName = _viewName.trim(); if (_viewName == "") { alert("Please fill the View input."); } else { var url = "<?=str_replace("localhost","",$domain)?>/init.engine.php"; var data = { action: "create_view", name: _viewName } 
$.post(url, data, function(data, status){ if (status == "success") { if (data == true) { alert(_viewName + " is created successfully."); $("#viewName").val(""); } else { alert("Sorry, " + _viewName + " was not created."); } } else { alert("Sorry, " + _viewName + " was not created."); } }); } } function createController() { var _controllerName = $("#controllerName").val(); _controllerName = _controllerName.trim(); if (_controllerName == "") { alert("Please fill the Controller input."); } else { var url = "<?=str_replace("localhost","",$domain)?>/init.engine.php"; var data = { action: "create_controller", name: _controllerName } 
$.post(url, data, function(data, status){ if (status == "success") { if (data == true) { alert(_controllerName + " is created successfully."); $("#controllerName").val(""); } else { alert("Sorry, " + _controllerName + " was not created."); } } else { alert("Sorry, " + _controllerName + " was not created."); } }); } } function createProvider() { var _providerName = $("#providerName").val(); _providerName = _providerName.trim(); if (_providerName == "") { alert("Please fill the Provider input."); } else { var url = "<?=str_replace("localhost","",$domain)?>/init.engine.php";var data = { action: "create_provider", name: _providerName }
$.post(url, data, function(data, status){ if (status == "success") { if (data == true) { alert(_providerName + " is created successfully."); $("#providerName").val(""); } else { alert("Sorry, " + _providerName + " was not created."); } } else { alert("Sorry, " + _providerName + " was not created."); } }); } } function addAuth() { var url = "<?=str_replace("localhost","",$domain)?>/init.engine.php"; var data = { action: "add_auth" } 
$.post(url, data, function(data, status){ if (status == "success") { if (data == true) { alert("Authentication is added successfully."); } else { alert("Sorry, Authentication was not added."); } } else { alert("Sorry, Authentication was not added."); } }); } </script> </html> <?php } function createModel($name, $table) { $codes = "<?php\r\nnamespace Models;\r\nuse Core\Model;\r\n\r\nclass $name extends Model\r\n{\r\n\r\n\tpublic function __construct()\r\n\t{\r\n\t\tparent::__construct(\"$table\");\r\n\t}\r\n\r\n\t// methods...\r\n\r\n}\r\n\r\n?>"; if (!file_exists("models/$name.php")){ $newfile = fopen("models/$name.php", "w"); fwrite($newfile, $codes); fclose($newfile); return true; } else { return false; } } function createView($name) { $codes = "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n\t<meta charset=\"UTF-8\">\r\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n\t<title>Document</title>\r\n\r\n\t<!-- Jquery -->\r\n\t<script src=\"@assets/js/jquery.min.js\"></script>\r\n\t<!-- Popper -->\r\n\t<script src=\"@assets/js/popper.min.js\"></script>\r\n\t<!-- Bootstrap -->\r\n\t<script src=\"@assets/js/bootstrap.min.js\"></script>\r\n\t<link rel=\"stylesheet\" href=\"@assets/css/bootstrap.css\">\r\n\t<!-- Font Awesome -->\r\n\t<link rel=\"stylesheet\" href=\"@assets/css/fontawesome.css\">\r\n\t<!-- Custom -->\r\n\t<script src=\"@assets/js/main.js\"></script>\r\n\t<link rel=\"stylesheet\" href=\"@assets/css/main.css\">\r\n</head>\r\n<body>\r\n\r\n\t<!-- view codes... -->\r\n\r\n</body>\r\n</html>"; if (!file_exists("public/views/$name.html")){ $newfile = fopen("public/views/$name.html", "w"); fwrite($newfile, $codes); fclose($newfile); return true; } else { return false; } } function createController($name) { $codes = "<?php\r\nnamespace Controllers;\r\nuse Core\Controller;\r\nuse Core\Route;\r\nuse Core\View;\r\n\r\nclass $name extends Controller\r\n{\r\n\tpublic function __construct()\r\n\t{\r\n\t\tparent::__construct();\r\n\t}\r\n\r\n\t// methods...\r\n\r\n}\r\n\r\n?>"; if (!file_exists("controllers/$name.php")){ $newfile = fopen("controllers/$name.php", "w"); fwrite($newfile, $codes); fclose($newfile); return true; } else { return false; } } function createProvider($name) { $codes = "<?php\r\nnamespace Providers;\r\n\r\nclass $name\r\n{\r\n\r\n\t// methods...\r\n\r\n}\r\n\r\n?>"; if (!file_exists("providers/$name.php")){ $newfile = fopen("providers/$name.php", "w"); fwrite($newfile, $codes); fclose($newfile); return true; } else { return false; } } function addAuthentication() { include_once "config.php"; $driver = \Config["DB_CONNECTION"]; $host = \Config["DB_HOST"]; $port = \Config["DB_PORT"]; $database = \Config["DB_DATABASE"]; $username = \Config["DB_USERNAME"]; $password = \Config["DB_PASSWORD"]; try { $conn = new PDO("$driver:host=$host;dbname=$database;port=$port", $username, $password); $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); $sql1 = "CREATE TABLE authentication_tbl (`user_id` varchar(20) NOT NULL, `role` varchar(20) NOT NULL, `api_token` varchar(60) NOT NULL, `remember_token` varchar(60) NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1"; $sql2 = "ALTER TABLE authentication_tbl ADD UNIQUE KEY `user_id` (`user_id`), ADD KEY `api_token` (`api_token`), ADD KEY `remember_token` (`remember_token`), ADD KEY `role` (`role`)"; $conn->exec($sql1); $conn->exec($sql2); $conn = null; $codes = "<?php\r\nnamespace Providers;\r\nuse Core\\Model;\r\n\r\nclass Auth extends Model\r\n{\r\n\tprivate static $"."Model;\r\n\t// table fields: user_id(string:20), api_token(string:60), remember_token(string:60)\r\n\r\n\tpublic function __construct()\r\n\t{\r\n\t\tself::$"."Model = parent::__construct(\"authentication_tbl\");\r\n\t}\r\n\r\n\t// methods...\r\n\r\n\tpublic static function addAuth(string $"."userId, string $"."role)\r\n\t{\r\n\t\tself::$"."Model->create([\r\n\t\t\t\"user_id\"=>$"."userId,\r\n\t\t\t\"role\"=>$"."role,\r\n\t\t\t\"api_token\"=>\"\",\r\n\t\t\t\"remember_token\"=>\"\"\r\n\t\t]);\r\n\t}\r\n\r\n\tprivate static function token(string $"."field)\r\n\t{\r\n\t\t$"."token = bin2hex(openssl_random_pseudo_bytes(30));\r\n\t\twhile (self::$"."Model->where(\"$"."field = '$"."token'\")->exist() == true) {\r\n\t\t\t$"."token = bin2hex(openssl_random_pseudo_bytes(30));\r\n\t\t}\r\n\r\n\t\treturn $"."token;\r\n\t}\r\n\r\n\tpublic static function login(string $"."userId, string $"."role, bool $"."remember)\r\n\t{\r\n\t\t// if remember user is set to true\r\n\t\tif ($"."remember == true)\r\n\t\t{\r\n\t\t\t// set session\r\n\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"] = $"."userId;\r\n\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"ROLE\"] = $"."role;\r\n\r\n\t\t\t// generate token for cookie\r\n\t\t\t$"."token = self::token(\"remember_token\");\r\n\r\n\t\t\t// store token in database\r\n\t\t\tself::$"."Model->where(\"user_id = '$"."userId'\")\r\n\t\t\t->update([\r\n\t\t\t\t\"remember_token\"=>$"."token\r\n\t\t\t]);\r\n\r\n\t\t\t// set timeout for cookie\r\n\t\t\t$"."timeout = time() + (\\Config[\"AUTH_TIMEOUT\"] * 3600);\r\n\r\n\t\t\t// set cookie\r\n\t\t\t\\setcookie(\\Config[\"APP\"],$"."token,$"."timeout,\"/\");\r\n\t\t}\r\n\t\t\r\n\t\t// if remember user is set to false\r\n\t\telseif ($"."remember == false)\r\n\t\t{\r\n\t\t\t// set session\r\n\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"] = $"."userId;\r\n\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"ROLE\"] = $"."role;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static function loginApi(string $"."userId)\r\n\t{\r\n\t\t// generate token for api\r\n\t\t$"."token = self::token(\"api_token\");\r\n\r\n\t\t// store token in database\r\n\t\tself::$"."Model->where(\"user_id = '$"."userId'\")\r\n\t\t->update([\r\n\t\t\t\"api_token\"=>self::token(\"api_token\")\r\n\t\t]);\r\n\t}\r\n\r\n\tpublic static function check(string $"."token = \"\") : bool\r\n\t{\r\n\t\t// if a session has been set\r\n\t\tif (isset($"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"]))\r\n\t\t{\r\n\t\t\t// user has already been authenticated before now\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\t// else if a cookie has been set\r\n\t\telseif (isset($"."_COOKIE[\\Config[\"APP\"]]))\r\n\t\t{\r\n\t\t\t// user used the remember me to remain authenticated\r\n\r\n\t\t\t// get token from cookie\r\n\t\t\t$"."token = $"."_COOKIE[\\Config[\"APP\"]];\r\n\r\n\t\t\t// verify the token gotten\r\n\t\t\t$"."authData = self::$"."Model->where(\"remember_token = '$"."token'\")\r\n\t\t\t->read(\"user_id, role\");\r\n\r\n\t\t\t// check if token exists\r\n\t\t\tif ($"."authData[\"flag\"] == true) {\r\n\t\t\t\t// token exists\r\n\r\n\t\t\t\t// create session for the user\r\n\t\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"] = $"."authData[\"data\"][0][\"user_id\"];\r\n\t\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"ROLE\"] = $"."authData[\"data\"][0][\"role\"];\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\t// cookie token doesn't exist in the database\r\n\t\t\t\t// therefore it must have been modified\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// else if a token was sent from an api request\r\n\t\telseif ($"."token != \"\")\r\n\t\t{\r\n\t\t\t// verify the token gotten\r\n\t\t\t$"."authData = self::$"."Model->where(\"api_token = '$"."token'\")\r\n\t\t\t->read(\"user_id, role\");\r\n\r\n\t\t\t// check if token exists\r\n\t\t\tif ($"."authData[\"flag\"] == true) {\r\n\t\t\t\t// token exists\r\n\r\n\t\t\t\t// create session for the user\r\n\t\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"] = $"."authData[\"data\"][0][\"user_id\"];\r\n\t\t\t\t$"."_SESSION[session_id().\\Config[\"APP\"]][\"ROLE\"] = $"."authData[\"data\"][0][\"role\"];\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\t// token doesn't exist in the database\r\n\t\t\t\t// therefore it must have been modified\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// else\r\n\t\telse\r\n\t\t{\r\n\t\t\t// cookie must have expired\r\n\t\t\t// token must not have been sent\r\n\t\t\t// the user must have closed the browser before to expire the session\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static function guard(string $"."role) : bool\r\n\t{\r\n\t\tif ($"."_SESSION[session_id().\\Config[\"APP\"]][\"ROLE\"] == $"."role) {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static function user()\r\n\t{\r\n\t\tif (isset($"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"])) {\r\n\t\t\treturn $"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static function logout()\r\n\t{\r\n\t\t// if user is being remembered\r\n\t\tif (isset($"."_COOKIE[\\Config[\"APP\"]]))\r\n\t\t{\r\n\t\t\t// session have been set\r\n\t\t\t$"."userId = $"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"];\r\n\t\t\t// remove token from the database\r\n\t\t\tself::$"."Model->where(\"user_id = '$"."userId'\")\r\n\t\t\t->update([\r\n\t\t\t\t\"remember_token\"=>\"\"\r\n\t\t\t]);\r\n\r\n\t\t\t// set expiration to an hour ago for cookie\r\n\t\t\t$"."expiration = time() - 3600;\r\n\r\n\t\t\t// set cookie\r\n\t\t\t\\setcookie(\\Config[\"APP\"],\"\",$"."expiration,\"/\");\r\n\t\t}\r\n\r\n\t\t// if session exists which must exist\r\n\t\tif (isset($"."_SESSION[session_id().\\Config[\"APP\"]][\"USER\"])) {\r\n\t\t\t// remove all session variables\r\n\t\t\t\\session_unset();\r\n\t\t\t\r\n\t\t\t// destroy the session\r\n\t\t\t\\session_destroy();\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic static function logoutApi(string $"."userId)\r\n\t{\r\n\t\tself::$"."Model->with(\"authentication_tbl\");\r\n\r\n\t\t// remove token from the database\r\n\t\tself::$"."Model->where(\"user_id = '$"."userId'\")\r\n\t\t->update([\r\n\t\t\t\"api_token\"=>\"\"\r\n\t\t]);\r\n\t}\r\n\r\n}\r\n\r\n?>\r\n";
$newfile = fopen("providers/Auth.php", "w"); fwrite($newfile, $codes); fclose($newfile); $codes = "<?php\r\nnamespace Core;\r\nuse Core\\Error;\r\n\r\nclass TemplateEngine\r\n{\r\n\t/**\r\n\t * Read and Convert php snippets \r\n\t * (@for, @foreach, @while, @do, @switch, @case, @if, @elseif ) \r\n\t * in file to Only HTML codes.\r\n\t *\r\n\t * @param string $"."file\r\n\t * @return string $"."data\r\n\t */\r\n\tpublic function convertToHTML(string $"."file)\r\n\t{\r\n\t\t$"."page = \"\";\r\n\t\t// NB: newline character is not used so that the html code can still maintain its line numbering in case of error reporting\r\n\t\t$"."vars = \"<?php use Core\\Route; use Providers\\Auth; /* View Functions */ function route(string $"."\".\"name, array $"."\".\"params = null){ return Route::getUri($"."\".\"name, $"."\".\"params); } function resources(string $"."\".\"file){ return Route::$"."\".\"appUrl . '/resources/' . $"."\".\"file; } function storage(string $"."\".\"file) { return (trim($"."\".\"file) != '' && file_exists('../'.$"."\".\"file) == true) ? Route::$"."\".\"appUrl.$"."\".\"file : ''; } function check(string $"."\".\"token = '') { return Auth::check($"."\".\"token); } function guard(string $"."\".\"role) { return Auth::guard($"."\".\"role); } ?>\";\r\n\t\t\r\n\t\tif ( isset($"."_SESSION[\"INIT_VIEW\"]) ) {\r\n\r\n\t\t\t$"."vars .= \"<?php \";\r\n\r\n\t\t\tforeach ($"."_SESSION[\"INIT_VIEW\"] as $"."key => $"."value) {\r\n\t\t\t\t$"."value = str_replace('\"',\"\\\"\",str_replace(\"'\",\"\\'\",$"."value));\r\n\t\t\t\t$"."vars .=  \"$"."\" . \"$"."key\" . \" = \" . \"'$"."value'\" . \"; \";\r\n\t\t\t}\r\n\r\n\t\t\t$"."vars .= \"?>\";\r\n\r\n\t\t\t// clear the logged view variables\r\n\t\t\t$"."_SESSION[\"INIT_VIEW\"] = null;\r\n\t\t}\r\n\r\n\t\tif ( isset($"."_SESSION[\"INIT_VIEW_LOG\"]) ) {\r\n\r\n\t\t\t$"."vars .= \"<?php \";\r\n\r\n\t\t\tforeach ($"."_SESSION[\"INIT_VIEW_LOG\"] as $"."key => $"."value) {\r\n\t\t\t\t$"."vars .=  \"$"."\" . \"$"."key\" . \" = \" . \"'$"."value'\" . \"; \";\r\n\t\t\t}\r\n\r\n\t\t\t$"."vars .= \"?>\";\r\n\r\n\t\t\t// clear the logged view variables\r\n\t\t\t$"."_SESSION[\"INIT_VIEW_LOG\"] = null;\r\n\t\t}\r\n\r\n\t\t$"."page .= $"."vars;\r\n\r\n\t\t// open file\r\n\t\ttry {\r\n\t\t\t$"."reader = fopen($"."file,\"r\",true);\r\n\t\t} catch (\\Throwable $"."th) {\r\n\t\t\t// handle error\r\n\t\t\tError::internalError(\"Unable to open file <i><b>'$"."file'</b></i> \");\r\n\t\t}\r\n\t\t\r\n\t\t// get the data line by line\r\n\t\twhile(!feof($"."reader)) {\r\n\t\t\t// get the next line\r\n\t\t\t$"."line = fgets($"."reader);\r\n\r\n\t\t\t// check for Import Snippet;\r\n\t\t\t$"."line = $"."this->replaceImportSnippets($"."line);\r\n\r\n\t\t\t// check for ForLoop Snippet\r\n\t\t\t$"."line = $"."this->replaceIfSnippets($"."line);\r\n\r\n\t\t\t// check for ForLoop Snippet\r\n\t\t\t$"."line = $"."this->replaceForLoopSnippets($"."line);\r\n\r\n\t\t\t// check for ForEach Snippet\r\n\t\t\t$"."line = $"."this->replaceForEachSnippets($"."line);\r\n\r\n\t\t\t// check for WhileLoop Snippet\r\n\t\t\t$"."line = $"."this->replaceWhileSnippets($"."line);\r\n\r\n\t\t\t// check for DoLoop Snippet\r\n\t\t\t$"."line = $"."this->replaceDoLoopSnippets($"."line);\r\n\r\n\t\t\t// check for Switch Snippet\r\n\t\t\t$"."line = $"."this->replaceSwitchSnippets($"."line);\r\n\r\n\t\t\t// check for Statement Snippet;\r\n\t\t\t$"."line = $"."this->replaceStmtSnippets($"."line);\r\n\r\n\t\t\t// check for curly braces\r\n\t\t\t$"."line = $"."this->replaceCurls($"."line);\r\n\r\n\t\t\t// check for fake curlys\r\n\t\t\t$"."line = $"."this->replaceFakeCurlys($"."line);\r\n\r\n\t\t\t// add line to data\r\n\t\t\t$"."page .= $"."line;\r\n\t\t}\r\n\r\n\t\t// close file \r\n\t\tfclose($"."reader);\r\n\r\n\t\t// make the page valid for eval()\r\n\t\t$"."page = \"?>\" . $"."page;\r\n\r\n\t\t// return page\r\n\t\treturn $"."page;\r\n\r\n\t}\r\n\r\n\tprivate function replaceIfSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@if\"){\r\n\t\t\t$"."temps[0] = \"<?php if\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\t$"."line = $"."this->replaceCondTag($"."line);  \r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@elseif\"){\r\n\t\t\t$"."temps[0] = \"<?php } elseif\";\r\n\t\t\t$"."temps[] = \"{ ?> \\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\t$"."line = $"."this->replaceCondTag($"."line);  \r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@else\"){\r\n\t\t\t$"."temps[0] = \"<?php } else\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@endif\"){\r\n\t\t\t$"."temps[0] = \"<?php } ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceForLoopSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@for\"){\r\n\t\t\t$"."temps[0] = \"<?php for\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\t$"."line = $"."this->replaceCondTag($"."line);  \r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@endfor\"){\r\n\t\t\t$"."temps[0] = \"<?php } ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceForEachSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@foreach\"){\r\n\t\t\t$"."temps[0] = \"<?php foreach\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@endforeach\"){\r\n\t\t\t$"."temps[0] = \"<?php } ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceDoLoopSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@do\"){\r\n\t\t\t$"."temps[0] = \"<?php do\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@enddo\"){\r\n\t\t\t$"."temps[0] = \"<?php } while\";\r\n\t\t\t$"."temps[] = \"?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\t$"."line = $"."this->replaceCondTag($"."line);  \r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceWhileSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@while\"){\r\n\t\t\t$"."temps[0] = \"<?php while\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\t$"."line = $"."this->replaceCondTag($"."line);  \r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@endwhile\"){\r\n\t\t\t$"."temps[0] = \"<?php } ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceSwitchSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@switch\"){\r\n\t\t\t$"."temps[0] = \"<?php switch\";\r\n\t\t\t$"."temps[] = \"{ ?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@case\"){\r\n\t\t\t$"."temps[0] = \"<?php case\";\r\n\t\t\t$"."temps[] = \": ?> \\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@default\"){\r\n\t\t\t$"."temps[0] = \"<?php default: ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@break\"){\r\n\t\t\t$"."temps[0] = \"<?php break; ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\telseif ($"."temps[0] == \"@endswitch\"){\r\n\t\t\t$"."temps[0] = \"<?php } ?>\\n\";\r\n\t\t\t$"."line = $"."temps[0];\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceImportSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, fetch view codes\r\n\t\tif ($"."temps[0] == \"@import\"){\r\n\t\t\t$"."filename = (trim($"."temps[1]) != \"\") ? \"../resources/views/\" . $"."temps[1] : \"\" ;\r\n\r\n\t\t\t$"."codes = (\\file_exists($"."filename)) ? file_get_contents($"."filename) : \"\" ;\r\n\t\t\t$"."line = $"."codes;\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate function replaceCondTag(string $"."line)\r\n\t{\r\n\t\t// less than or equal to\r\n\t\t$"."line = str_replace(\".le\", \"<=\", $"."line);\r\n\r\n\t\t// less than\r\n\t\t$"."line = str_replace(\".lt\", \"<\", $"."line);\r\n\r\n\t\t// greater than or equal to\r\n\t\t$"."line = str_replace(\".ge\", \">=\", $"."line);\r\n\r\n\t\t// greater than\r\n\t\t$"."line = str_replace(\".gt\", \">\", $"."line);\r\n\r\n\t\t// equal to\r\n\t\t$"."line = str_replace(\".eq\", \"==\", $"."line);\r\n\r\n\t\t// not equal to\r\n\t\t$"."line = str_replace(\".ne\", \"!=\", $"."line);\r\n\r\n\t\t// not equivalent to\r\n\t\t$"."line = str_replace(\".eqq\", \"===\", $"."line);\r\n\r\n\t\t// return line\r\n\t\treturn $"."line;\r\n\t}\r\n\r\n\tprivate function replaceStmtSnippets(string $"."line)\r\n\t{\r\n\t\t$"."temp = $"."line;\r\n\r\n\t\t// $"."temp = strip_tags($"."temp);\r\n\t\t$"."temp = str_replace(\"\\r\\n\", \"\", $"."temp);\r\n\t\t$"."temp = trim($"."temp);\r\n\t\t$"."temps = explode(\" \", $"."temp);\r\n\r\n\t\t// if the first element is equal to the snippet keywords, expand codes\r\n\t\tif ($"."temps[0] == \"@stmt\"){\r\n\t\t\t$"."temps[0] = \"<?php\";\r\n\t\t\t$"."temps[] = \"?>\\n\";\r\n\t\t\t$"."line = implode(\" \", $"."temps);\r\n\t\t\t// $"."line = $"."this->replaceCondTag($"."line);\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\r\n\t\t// else return the initial $"."line\r\n\t\telse{\r\n\t\t\treturn $"."line;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tprivate function replaceCurls(string $"."line)\r\n\t{\r\n\t\t// if {{ and }} are found in the string\r\n\t\tif ( substr_count($"."line,\"{{\") == substr_count($"."line,\"}}\") ){\r\n\t\t\t$"."line = str_replace(\"{{\", \"<?=\", $"."line);\r\n\t\t\t$"."line = str_replace(\"}}\", \"?>\", $"."line);\r\n\t\t}\r\n\r\n\t\treturn $"."line;\r\n\t}\r\n\r\n\tprivate function replaceFakeCurlys(string $"."line)\r\n\t{\r\n\t\t$"."line = preg_replace(\"/<\\?= *\\?>/\", \"{{}}\", $"."line);\r\n\r\n\t\treturn $"."line;\r\n\t}\r\n\r\n}\r\n\r\n?>\r\n"; $newfile = fopen("Core/TemplateEngine.php", "w"); fwrite($newfile, $codes); fclose($newfile); $codes = "<?php\r\nnamespace Core;\r\nuse Providers\Auth;\r\n\r\nclass Controller\r\n{\r\n\tpublic function __construct()\r\n\t{\r\n\t\tnew Auth;\r\n\t}\r\n}\r\n\r\n?>"; $newfile = fopen("Core/Controller.php", "w"); fwrite($newfile, $codes); fclose($newfile); return true; } catch (PDOException $e) { return false; } } ?>